import streamlit as st
import google.generativeai as genai
import hashlib
import os
import io
try:
    from docx import Document
except ImportError:
    st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ python-docx, ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: pip install python-docx")
    st.stop()


# --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ---
st.set_page_config(
    page_title="‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô AI",
    page_icon="‚úçÔ∏è",
    layout="wide"
)

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏à‡∏ô‡∏≤‡∏ô‡∏∏‡∏Å‡∏£‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ---
DICTIONARY_FILE = "personal_dictionary.txt"

def load_dictionary():
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå"""
    if not os.path.exists(DICTIONARY_FILE):
        return set()
    with open(DICTIONARY_FILE, "r", encoding="utf-8") as f:
        return set(word.strip() for word in f if word.strip())

def save_dictionary(words):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
    with open(DICTIONARY_FILE, "w", encoding="utf-8") as f:
        for word in sorted(list(words)):
            f.write(f"{word}\n")

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Gemini API ---
CORRECT_PASSWORD_HASH = "8c2e3c846b41be4a5e37349a7c36a254"  # MD5 hash for 'Ewhale@123'

@st.cache_data(show_spinner=False)
def call_gemini_api(prompt: str, api_key: str):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Gemini API ‡∏û‡∏£‡πâ‡∏≠‡∏° Error Handling"""
    try:
        genai.configure(api_key=api_key)
        request_options = {'timeout': 300}
        model = genai.GenerativeModel('gemini-1.5-flash')
        response = model.generate_content(prompt, request_options=request_options)
        return response.text
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Gemini API: {e}", icon="üö®")
        return None

def get_proofread_result(text_to_check: str, api_key: str, style: str, dictionary: set):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏™‡∏π‡∏à‡∏ô‡πå‡∏≠‡∏±‡∏Å‡∏©‡∏£"""
    style_instruction = "‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡∏™‡∏•‡∏∞‡∏™‡∏•‡∏ß‡∏¢, ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô, ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£"
    if style == "‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (Casual)":
        style_instruction = "‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡πÑ‡∏ß‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå"
    
    dictionary_instruction = ""
    if dictionary:
        dict_words = ", ".join(f"'{word}'" for word in dictionary)
        dictionary_instruction = f"**‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô:** ‡∏Ñ‡∏≥‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏°‡∏≠‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î: {dict_words}"

    prompt = f"""
    ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ö‡∏£‡∏£‡∏ì‡∏≤‡∏ò‡∏¥‡∏Å‡∏≤‡∏£ (Editor) ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î

    **‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:**
    1. **‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:** ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    2. **‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏≥‡∏ô‡∏ß‡∏ô:** {style_instruction}
    3. **‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô:** ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏∏ "‡∏Ñ‡∏≥‡πÄ‡∏î‡∏¥‡∏°", "‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", ‡πÅ‡∏•‡∏∞ "‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•"
    4. {dictionary_instruction}

    **‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö:**
    ---
    {text_to_check}
    ---

    **‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å):**
    [CORRECTED_TEXT_START]
    <‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß>
    [CORRECTED_TEXT_END]
    [EXPLANATION_START]
    - **‡∏Ñ‡∏≥‡πÄ‡∏î‡∏¥‡∏°:** '...' -> **‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô:** '...' | **‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•:** ...
    [EXPLANATION_END]
    """
    response_text = call_gemini_api(prompt, api_key)
    if response_text:
        try:
            corrected = response_text.split('[CORRECTED_TEXT_END]')[0].split('[CORRECTED_TEXT_START]')[1].strip()
            explanation = response_text.split('[EXPLANATION_END]')[0].split('[EXPLANATION_START]')[1].strip()
            return corrected, explanation
        except IndexError:
            st.error("AI ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", icon="üß©")
            st.code(response_text)
            return None, None
    return None, None

def get_analysis_result(text_to_check: str, api_key: str):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°"""
    prompt = f"""
    ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ ‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ (Content Analyst) ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç
    ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ï‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î

    **‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:**
    ---
    {text_to_check}
    ---
    
    **‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:**
    [SUMMARY_START]
    <‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 2-3 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ>
    [SUMMARY_END]
    [TONE_START]
    <‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏ó‡∏ô‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô ‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£, ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á, ‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å, ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏±‡∏á) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ>
    [TONE_END]
    [READABILITY_START]
    <‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å 1 ‡∏ñ‡∏∂‡∏á 10 (1=‡∏≠‡πà‡∏≤‡∏ô‡∏¢‡∏≤‡∏Å‡∏°‡∏≤‡∏Å, 10=‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏°‡∏≤‡∏Å) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á>
    [READABILITY_END]
    """
    response_text = call_gemini_api(prompt, api_key)
    if response_text:
        try:
            summary = response_text.split('[SUMMARY_END]')[0].split('[SUMMARY_START]')[1].strip()
            tone = response_text.split('[TONE_END]')[0].split('[TONE_START]')[1].strip()
            readability = response_text.split('[READABILITY_END]')[0].split('[READABILITY_START]')[1].strip()
            return summary, tone, readability
        except IndexError:
            st.error("AI ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", icon="üß©")
            st.code(response_text)
            return None, None, None
    return None, None, None

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Session State ---
def init_session_state():
    """Initialize session state variables if they don't exist."""
    state_defaults = {
        'corrected_text': "",
        'explanation': "",
        'analysis_results': None,
        'authenticated': False,
        'dictionary': load_dictionary()
    }
    for key, value in state_defaults.items():
        if key not in st.session_state:
            st.session_state[key] = value

init_session_state()

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° (Streamlit UI) ---

# --- Sidebar ---
with st.sidebar:
    st.title("‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠")
    
    st.subheader("API Key Configuration")
    password_input = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏µ‡∏¢‡πå", type="password")
    if st.button("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"):
        if password_input:
            hashed_password = hashlib.md5(password_input.encode()).hexdigest()
            if hashed_password == CORRECT_PASSWORD_HASH:
                st.session_state.authenticated = True
                st.success("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            else:
                st.session_state.authenticated = False
                st.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        else:
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô")
            
    api_key_input = st.text_input(
        "Google AI API Key", type="password", 
        value="AIzaSyCFcpERGjX-Y890v61yn7RbQHNsTqg0dTQ",
        disabled=not st.session_state.authenticated
    )
    st.caption("‡∏£‡∏±‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà [aistudio.google.com](https://aistudio.google.com/)")
    
    st.divider()
    
    st.subheader("üìö ‡∏û‡∏à‡∏ô‡∏≤‡∏ô‡∏∏‡∏Å‡∏£‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß")
    with st.form("dict_form", clear_on_submit=True):
        new_word = st.text_input("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô")
        submitted = st.form_submit_button("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥")
        if submitted and new_word:
            if new_word not in st.session_state.dictionary:
                st.session_state.dictionary.add(new_word)
                save_dictionary(st.session_state.dictionary)
                st.success(f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ '{new_word}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                
    if st.session_state.dictionary:
        with st.expander("‡πÅ‡∏™‡∏î‡∏á/‡∏•‡∏ö‡∏Ñ‡∏≥‡πÉ‡∏ô‡∏û‡∏à‡∏ô‡∏≤‡∏ô‡∏∏‡∏Å‡∏£‡∏°"):
            for word in sorted(list(st.session_state.dictionary)):
                col1, col2 = st.columns([3, 1])
                col1.write(f"- {word}")
                if col2.button("‡∏•‡∏ö", key=f"del_{word}", use_container_width=True):
                    st.session_state.dictionary.remove(word)
                    save_dictionary(st.session_state.dictionary)
                    st.rerun()

# --- ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å ---
st.title("‚úçÔ∏è ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô AI ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞")
st.markdown("‡∏û‡∏¥‡∏™‡∏π‡∏à‡∏ô‡πå‡∏≠‡∏±‡∏Å‡∏©‡∏£, ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û, ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ---
uploaded_file = st.file_uploader("‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (.txt / .docx)", type=['txt', 'docx'])
if uploaded_file is not None:
    try:
        if uploaded_file.type == "text/plain":
            st.session_state.input_text = uploaded_file.getvalue().decode("utf-8")
        elif uploaded_file.type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
            doc = Document(io.BytesIO(uploaded_file.getvalue()))
            st.session_state.input_text = "\n".join([para.text for para in doc.paragraphs])
        st.success("‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
        # Clear previous results when a new file is uploaded
        st.session_state.corrected_text = ""
        st.session_state.explanation = ""
        st.session_state.analysis_results = None
    except Exception as e:
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {e}")

# --- Layout ‡πÅ‡∏ö‡∏ö 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ---
col1, col2 = st.columns(2, gap="medium")
with col1:
    st.subheader("‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö")
    input_text = st.text_area("‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°...", height=300, key="input_text")
    char_count, word_count = len(input_text), len(input_text.split())
    st.caption(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£: {char_count} | ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥ (‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì): {word_count}")
    
    st.markdown("---") # ‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏±‡πà‡∏ô
    
    # --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° (‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ) ---
    st.write("**‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°:**")
    control_cols = st.columns([1.5, 2, 2, 1])
    editing_style = control_cols[0].selectbox("‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ", ("‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£ (Formal)", "‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (Casual)"), label_visibility="collapsed")

    if control_cols[1].button("‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏¥‡∏™‡∏π‡∏à‡∏ô‡πå‡∏≠‡∏±‡∏Å‡∏©‡∏£", type="primary", use_container_width=True):
        if input_text and api_key_input:
            with st.spinner("AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏¥‡∏™‡∏π‡∏à‡∏ô‡πå‡∏≠‡∏±‡∏Å‡∏©‡∏£..."):
                corrected, explanation = get_proofread_result(input_text, api_key_input, editing_style, st.session_state.dictionary)
            st.session_state.corrected_text = corrected if corrected else ""
            st.session_state.explanation = explanation if explanation else ""
            st.session_state.analysis_results = None
            st.rerun()
        else:
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞ API Key ‡∏Å‡πà‡∏≠‡∏ô")

    if control_cols[2].button("‚ú® ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°", use_container_width=True):
        if input_text and api_key_input:
            with st.spinner("AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°..."):
                summary, tone, readability = get_analysis_result(input_text, api_key_input)
            st.session_state.analysis_results = {"summary": summary, "tone": tone, "readability": readability}
            st.session_state.corrected_text = ""
            st.session_state.explanation = ""
            st.rerun()
        else:
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞ API Key ‡∏Å‡πà‡∏≠‡∏ô")

    if control_cols[3].button("üßπ ‡∏•‡πâ‡∏≤‡∏á", use_container_width=True):
        # This is the correct way to clear states to avoid errors
        st.session_state.input_text = ""
        st.session_state.corrected_text = ""
        st.session_state.explanation = ""
        st.session_state.analysis_results = None
        st.rerun()

with col2:
    st.subheader("‡∏â‡∏ö‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏î‡∏¢ AI")
    output_container = st.container(height=405, border=True)
    output_container.markdown(st.session_state.corrected_text)

# --- ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ---
st.divider()

# Display Analysis Results if they exist
if st.session_state.analysis_results and all(st.session_state.analysis_results.values()):
    st.subheader("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°")
    res = st.session_state.analysis_results
    st.success(f"**‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:** {res['summary']}", icon="üéØ")
    st.info(f"**‡πÇ‡∏ó‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤:** {res['tone']}", icon="üó£Ô∏è")
    st.warning(f"**‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô:** {res['readability']}", icon="‚≠ê")

# Display Proofreading Explanation if it exists
if st.session_state.explanation:
    with st.expander("üìÑ ‡∏î‡∏π‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", expanded=True):
        st.markdown(st.session_state.explanation)
    
    download_cols = st.columns(2)
    download_cols[0].download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏â‡∏ö‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (.txt)", st.session_state.corrected_text, "corrected_text.txt", use_container_width=True)
    download_cols[1].download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ (.txt)", st.session_state.explanation, "explanation.txt", use_container_width=True)

# --- Footer ---
st.divider()
st.markdown("‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ **WH41E**")